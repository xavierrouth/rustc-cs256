Building stage0 library artifacts (x86_64-unknown-linux-gnu)
Building compiler artifacts (stage0 -> stage1, x86_64-unknown-linux-gnu)
Creating a sysroot for stage1 compiler (use `rustup toolchain link 'name' build/host/stage1`)
Building stage1 library artifacts (x86_64-unknown-linux-gnu)
Building stage0 tool compiletest (x86_64-unknown-linux-gnu)
Testing stage1 compiletest suite=ui mode=ui (x86_64-unknown-linux-gnu)

running 1 tests
F

failures:

---- [ui] tests/ui/pre/pre-test-1.rs stdout ----
normalized stdout:
Body that analysis is running on DefId(0:3 ~ pre_test_1[6492]::main)
----------------ANTICIPATED DEBUG BEGIN----------------
size: 63
bb0[4]: stmt visited _6 = CheckedAdd(_4, _5)
GEN expr CheckedAdd(_4, _5)
bb0[3]: stmt visited _5 = _2
KILL expr Expr(0)
bb0[2]: stmt visited _4 = _1
KILL expr Expr(0)
bb0[1]: stmt visited _2 = const 0_i32
bb0[0]: stmt visited _1 = const 0_i32
bb1[4]: stmt visited _8 = Ge(move _9, move _10)
GEN expr Ge(move _9, move _10)
bb1[3]: stmt visited _10 = _2
KILL expr Expr(1)
bb1[2]: stmt visited _9 = _1
KILL expr Expr(1)
bb1[1]: stmt visited _7 = _3
bb1[0]: stmt visited _3 = move (_6.0: i32)
bb2[2]: stmt visited _13 = CheckedAdd(_11, _12)
GEN expr CheckedAdd(_11, _12)
bb2[1]: stmt visited _12 = _2
KILL expr Expr(2)
bb2[0]: stmt visited _11 = _1
KILL expr Expr(2)
bb3[1]: stmt visited _14 = CheckedMul(_7, const 2_i32)
bb3[0]: stmt visited _7 = move (_13.0: i32)
bb4[0]: stmt visited _7 = move (_14.0: i32)
bb5[2]: stmt visited _19 = CheckedAdd(_17, _18)
GEN expr CheckedAdd(_17, _18)
bb5[1]: stmt visited _18 = _2
KILL expr Expr(3)
bb5[0]: stmt visited _17 = _1
KILL expr Expr(3)
bb6[1]: stmt visited _20 = Eq(_16, const i32::MIN)
bb6[0]: stmt visited _16 = move (_19.0: i32)
bb7[1]: stmt visited _21 = CheckedAdd(_15, const 2_i32)
bb7[0]: stmt visited _15 = Neg(move _16)
bb8[0]: stmt visited _7 = move (_21.0: i32)
bb9[3]: stmt visited _30 = &_7
bb9[2]: stmt visited _24 = move _25 as &[&str] (PointerCoercion(Unsize))
bb9[1]: stmt visited _25 = _31
bb9[0]: stmt visited _31 = const _
bb10[2]: stmt visited _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))
bb10[1]: stmt visited _27 = &_28
bb10[0]: stmt visited _28 = [move _29]
----------------ANTICIPATED DEBUG END----------------



bb0[4]: stmt visited _6 = CheckedAdd(_4, _5)
GEN expr CheckedAdd(_4, _5)
bb0[3]: stmt visited _5 = _2
KILL expr Expr(0)
bb0[2]: stmt visited _4 = _1
KILL expr Expr(0)
bb0[1]: stmt visited _2 = const 0_i32
bb0[0]: stmt visited _1 = const 0_i32
bb1[4]: stmt visited _8 = Ge(move _9, move _10)
GEN expr Ge(move _9, move _10)
bb1[3]: stmt visited _10 = _2
KILL expr Expr(1)
bb1[2]: stmt visited _9 = _1
KILL expr Expr(1)
bb1[1]: stmt visited _7 = _3
bb1[0]: stmt visited _3 = move (_6.0: i32)
bb2[2]: stmt visited _13 = CheckedAdd(_11, _12)
GEN expr CheckedAdd(_11, _12)
bb2[1]: stmt visited _12 = _2
KILL expr Expr(2)
bb2[0]: stmt visited _11 = _1
KILL expr Expr(2)
bb3[1]: stmt visited _14 = CheckedMul(_7, const 2_i32)
bb3[0]: stmt visited _7 = move (_13.0: i32)
bb4[0]: stmt visited _7 = move (_14.0: i32)
bb5[2]: stmt visited _19 = CheckedAdd(_17, _18)
GEN expr CheckedAdd(_17, _18)
bb5[1]: stmt visited _18 = _2
KILL expr Expr(3)
bb5[0]: stmt visited _17 = _1
KILL expr Expr(3)
bb6[1]: stmt visited _20 = Eq(_16, const i32::MIN)
bb6[0]: stmt visited _16 = move (_19.0: i32)
bb7[1]: stmt visited _21 = CheckedAdd(_15, const 2_i32)
bb7[0]: stmt visited _15 = Neg(move _16)
bb8[0]: stmt visited _7 = move (_21.0: i32)
bb9[3]: stmt visited _30 = &_7
bb9[2]: stmt visited _24 = move _25 as &[&str] (PointerCoercion(Unsize))
bb9[1]: stmt visited _25 = _31
bb9[0]: stmt visited _31 = const _
bb10[2]: stmt visited _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))
bb10[1]: stmt visited _27 = &_28
bb10[0]: stmt visited _28 = [move _29]
Anticipated:
set for block bb0 : Dual([])
set for block bb1 : Dual([])
set for block bb2 : Dual([])
set for block bb3 : Dual([])
set for block bb4 : Dual([])
set for block bb5 : Dual([])
set for block bb6 : Dual([])
set for block bb7 : Dual([])
set for block bb8 : Dual([])
set for block bb9 : Dual([])
set for block bb10 : Dual([])
set for block bb11 : Dual([])
set for block bb12 : Dual([])
set for block bb13 : Dual([])
set for block bb14 : Dual([])
----------------AVAILABLE DEBUG BEGIN----------------
stmt visited _1 = const 0_i32
Entering BB: bb0
stmt visited _2 = const 0_i32
stmt visited _4 = _1
KILL expr Expr(0)
stmt visited _5 = _2
KILL expr Expr(0)
stmt visited _6 = CheckedAdd(_4, _5)
GEN expr CheckedAdd(_4, _5)
stmt visited _3 = move (_6.0: i32)
Entering BB: bb1
stmt visited _7 = _3
stmt visited _9 = _1
KILL expr Expr(1)
stmt visited _10 = _2
KILL expr Expr(1)
stmt visited _8 = Ge(move _9, move _10)
GEN expr Ge(move _9, move _10)
stmt visited _11 = _1
Entering BB: bb2
KILL expr Expr(2)
stmt visited _12 = _2
KILL expr Expr(2)
stmt visited _13 = CheckedAdd(_11, _12)
GEN expr CheckedAdd(_11, _12)
stmt visited _7 = move (_13.0: i32)
Entering BB: bb3
stmt visited _14 = CheckedMul(_7, const 2_i32)
stmt visited _7 = move (_14.0: i32)
Entering BB: bb4
stmt visited _17 = _1
Entering BB: bb5
KILL expr Expr(3)
stmt visited _18 = _2
KILL expr Expr(3)
stmt visited _19 = CheckedAdd(_17, _18)
GEN expr CheckedAdd(_17, _18)
stmt visited _16 = move (_19.0: i32)
Entering BB: bb6
stmt visited _20 = Eq(_16, const i32::MIN)
stmt visited _15 = Neg(move _16)
Entering BB: bb7
stmt visited _21 = CheckedAdd(_15, const 2_i32)
stmt visited _7 = move (_21.0: i32)
Entering BB: bb8
stmt visited _31 = const _
Entering BB: bb9
stmt visited _25 = _31
stmt visited _24 = move _25 as &[&str] (PointerCoercion(Unsize))
stmt visited _30 = &_7
stmt visited _28 = [move _29]
Entering BB: bb10
stmt visited _27 = &_28
stmt visited _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))
terminator visited assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb1, unwind continue]
terminator visited switchInt(move _8) -> [0: bb5, otherwise: bb2]
terminator visited assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _17, move _18) -> [success: bb6, unwind continue]
terminator visited assert(!move _20, "attempt to negate `{}`, which would overflow", _16) -> [success: bb7, unwind continue]
terminator visited assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 2_i32) -> [success: bb8, unwind continue]
terminator visited goto -> bb14
terminator visited goto -> bb9
Entering BB: bb14
terminator visited assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, move _12) -> [success: bb3, unwind continue]
terminator visited assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", _7, const 2_i32) -> [success: bb4, unwind continue]
terminator visited goto -> bb13
terminator visited goto -> bb9
Entering BB: bb13
terminator visited _29 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _30) -> [return: bb10, unwind continue]
terminator visited _23 = Arguments::<'_>::new_v1(move _24, move _26) -> [return: bb11, unwind continue]
terminator visited _22 = _print(move _23) -> [return: bb12, unwind continue]
Entering BB: bb11
terminator visited return
Entering BB: bb12
GEN: anticipated expr: Expr(0)
GEN: anticipated expr: Expr(1)
GEN: anticipated expr: Expr(2)
GEN: anticipated expr: Expr(3)
GEN: anticipated expr: Expr(4)
GEN: anticipated expr: Expr(5)
GEN: anticipated expr: Expr(6)
GEN: anticipated expr: Expr(7)
GEN: anticipated expr: Expr(8)
GEN: anticipated expr: Expr(9)
GEN: anticipated expr: Expr(10)
GEN: anticipated expr: Expr(11)
GEN: anticipated expr: Expr(12)
GEN: anticipated expr: Expr(13)
GEN: anticipated expr: Expr(14)
GEN: anticipated expr: Expr(15)
GEN: anticipated expr: Expr(16)
GEN: anticipated expr: Expr(17)
GEN: anticipated expr: Expr(18)
GEN: anticipated expr: Expr(19)
GEN: anticipated expr: Expr(20)
GEN: anticipated expr: Expr(21)
GEN: anticipated expr: Expr(22)
GEN: anticipated expr: Expr(23)
GEN: anticipated expr: Expr(24)
GEN: anticipated expr: Expr(25)
GEN: anticipated expr: Expr(26)
GEN: anticipated expr: Expr(27)
GEN: anticipated expr: Expr(28)
GEN: anticipated expr: Expr(29)
GEN: anticipated expr: Expr(30)
GEN: anticipated expr: Expr(31)
GEN: anticipated expr: Expr(32)
GEN: anticipated expr: Expr(33)
GEN: anticipated expr: Expr(34)
GEN: anticipated expr: Expr(35)
GEN: anticipated expr: Expr(36)
GEN: anticipated expr: Expr(37)
GEN: anticipated expr: Expr(38)
GEN: anticipated expr: Expr(39)
GEN: anticipated expr: Expr(40)
GEN: anticipated expr: Expr(41)
GEN: anticipated expr: Expr(42)
GEN: anticipated expr: Expr(43)
GEN: anticipated expr: Expr(44)
GEN: anticipated expr: Expr(45)
GEN: anticipated expr: Expr(46)
GEN: anticipated expr: Expr(47)
GEN: anticipated expr: Expr(48)
GEN: anticipated expr: Expr(49)
GEN: anticipated expr: Expr(50)
GEN: anticipated expr: Expr(51)
GEN: anticipated expr: Expr(52)
GEN: anticipated expr: Expr(53)
GEN: anticipated expr: Expr(54)
GEN: anticipated expr: Expr(55)
GEN: anticipated expr: Expr(56)
GEN: anticipated expr: Expr(57)
GEN: anticipated expr: Expr(58)
GEN: anticipated expr: Expr(59)
GEN: anticipated expr: Expr(60)
GEN: anticipated expr: Expr(61)
GEN: anticipated expr: Expr(62)
----------------AVAILABLE DEBUG END----------------



stmt visited _1 = const 0_i32
Entering BB: bb0
stmt visited _2 = const 0_i32
stmt visited _4 = _1
KILL expr Expr(0)
stmt visited _5 = _2
KILL expr Expr(0)
stmt visited _6 = CheckedAdd(_4, _5)
GEN expr CheckedAdd(_4, _5)
terminator visited assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb1, unwind continue]
stmt visited _3 = move (_6.0: i32)
Entering BB: bb1
stmt visited _7 = _3
stmt visited _9 = _1
KILL expr Expr(1)
stmt visited _10 = _2
KILL expr Expr(1)
stmt visited _8 = Ge(move _9, move _10)
GEN expr Ge(move _9, move _10)
terminator visited switchInt(move _8) -> [0: bb5, otherwise: bb2]
stmt visited _11 = _1
Entering BB: bb2
KILL expr Expr(2)
stmt visited _12 = _2
KILL expr Expr(2)
stmt visited _13 = CheckedAdd(_11, _12)
GEN expr CheckedAdd(_11, _12)
terminator visited assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, move _12) -> [success: bb3, unwind continue]
stmt visited _7 = move (_13.0: i32)
Entering BB: bb3
stmt visited _14 = CheckedMul(_7, const 2_i32)
terminator visited assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", _7, const 2_i32) -> [success: bb4, unwind continue]
stmt visited _7 = move (_14.0: i32)
Entering BB: bb4
terminator visited goto -> bb13
stmt visited _17 = _1
Entering BB: bb5
KILL expr Expr(3)
stmt visited _18 = _2
KILL expr Expr(3)
stmt visited _19 = CheckedAdd(_17, _18)
GEN expr CheckedAdd(_17, _18)
terminator visited assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _17, move _18) -> [success: bb6, unwind continue]
stmt visited _16 = move (_19.0: i32)
Entering BB: bb6
stmt visited _20 = Eq(_16, const i32::MIN)
terminator visited assert(!move _20, "attempt to negate `{}`, which would overflow", _16) -> [success: bb7, unwind continue]
stmt visited _15 = Neg(move _16)
Entering BB: bb7
stmt visited _21 = CheckedAdd(_15, const 2_i32)
terminator visited assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 2_i32) -> [success: bb8, unwind continue]
stmt visited _7 = move (_21.0: i32)
Entering BB: bb8
terminator visited goto -> bb14
stmt visited _31 = const _
Entering BB: bb9
stmt visited _25 = _31
stmt visited _24 = move _25 as &[&str] (PointerCoercion(Unsize))
stmt visited _30 = &_7
terminator visited _29 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _30) -> [return: bb10, unwind continue]
stmt visited _28 = [move _29]
Entering BB: bb10
stmt visited _27 = &_28
stmt visited _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))
terminator visited _23 = Arguments::<'_>::new_v1(move _24, move _26) -> [return: bb11, unwind continue]
terminator visited _22 = _print(move _23) -> [return: bb12, unwind continue]
Entering BB: bb11
terminator visited return
Entering BB: bb12
GEN: anticipated expr: Expr(0)
GEN: anticipated expr: Expr(1)
GEN: anticipated expr: Expr(2)
GEN: anticipated expr: Expr(3)
GEN: anticipated expr: Expr(4)
GEN: anticipated expr: Expr(5)
GEN: anticipated expr: Expr(6)
GEN: anticipated expr: Expr(7)
GEN: anticipated expr: Expr(8)
GEN: anticipated expr: Expr(9)
GEN: anticipated expr: Expr(10)
GEN: anticipated expr: Expr(11)
GEN: anticipated expr: Expr(12)
GEN: anticipated expr: Expr(13)
GEN: anticipated expr: Expr(14)
GEN: anticipated expr: Expr(15)
GEN: anticipated expr: Expr(16)
GEN: anticipated expr: Expr(17)
GEN: anticipated expr: Expr(18)
GEN: anticipated expr: Expr(19)
GEN: anticipated expr: Expr(20)
GEN: anticipated expr: Expr(21)
GEN: anticipated expr: Expr(22)
GEN: anticipated expr: Expr(23)
GEN: anticipated expr: Expr(24)
GEN: anticipated expr: Expr(25)
GEN: anticipated expr: Expr(26)
GEN: anticipated expr: Expr(27)
GEN: anticipated expr: Expr(28)
GEN: anticipated expr: Expr(29)
GEN: anticipated expr: Expr(30)
GEN: anticipated expr: Expr(31)
GEN: anticipated expr: Expr(32)
GEN: anticipated expr: Expr(33)
GEN: anticipated expr: Expr(34)
GEN: anticipated expr: Expr(35)
GEN: anticipated expr: Expr(36)
GEN: anticipated expr: Expr(37)
GEN: anticipated expr: Expr(38)
GEN: anticipated expr: Expr(39)
GEN: anticipated expr: Expr(40)
GEN: anticipated expr: Expr(41)
GEN: anticipated expr: Expr(42)
GEN: anticipated expr: Expr(43)
GEN: anticipated expr: Expr(44)
GEN: anticipated expr: Expr(45)
GEN: anticipated expr: Expr(46)
GEN: anticipated expr: Expr(47)
GEN: anticipated expr: Expr(48)
GEN: anticipated expr: Expr(49)
GEN: anticipated expr: Expr(50)
GEN: anticipated expr: Expr(51)
GEN: anticipated expr: Expr(52)
GEN: anticipated expr: Expr(53)
GEN: anticipated expr: Expr(54)
GEN: anticipated expr: Expr(55)
GEN: anticipated expr: Expr(56)
GEN: anticipated expr: Expr(57)
GEN: anticipated expr: Expr(58)
GEN: anticipated expr: Expr(59)
GEN: anticipated expr: Expr(60)
GEN: anticipated expr: Expr(61)
GEN: anticipated expr: Expr(62)
terminator visited goto -> bb9
Entering BB: bb13
terminator visited goto -> bb9
Entering BB: bb14
Available:
in set for block bb0 : Dual([])
out set for block bb0 : Dual([Expr(0)])
in set for block bb1 : Dual([Expr(0)])
out set for block bb1 : Dual([Expr(0), Expr(1)])
in set for block bb2 : Dual([Expr(0), Expr(1)])
out set for block bb2 : Dual([Expr(0), Expr(1), Expr(2)])
in set for block bb3 : Dual([Expr(0), Expr(1), Expr(2)])
out set for block bb3 : Dual([Expr(0), Expr(1), Expr(2)])
in set for block bb4 : Dual([Expr(0), Expr(1), Expr(2)])
out set for block bb4 : Dual([Expr(0), Expr(1), Expr(2)])
in set for block bb5 : Dual([Expr(0), Expr(1)])
out set for block bb5 : Dual([Expr(0), Expr(1), Expr(3)])
in set for block bb6 : Dual([Expr(0), Expr(1), Expr(3)])
out set for block bb6 : Dual([Expr(0), Expr(1), Expr(3)])
in set for block bb7 : Dual([Expr(0), Expr(1), Expr(3)])
out set for block bb7 : Dual([Expr(0), Expr(1), Expr(3)])
in set for block bb8 : Dual([Expr(0), Expr(1), Expr(3)])
out set for block bb8 : Dual([Expr(0), Expr(1), Expr(3)])
in set for block bb9 : Dual([Expr(0), Expr(1)])
out set for block bb9 : Dual([Expr(0), Expr(1)])
in set for block bb10 : Dual([Expr(0), Expr(1)])
out set for block bb10 : Dual([Expr(0), Expr(1)])
in set for block bb11 : Dual([Expr(0), Expr(1)])
out set for block bb11 : Dual([Expr(0), Expr(1)])
in set for block bb12 : Dual([Expr(0), Expr(1)])
out set for block bb12 : Dual([Expr(0), Expr(1), Expr(2), Expr(3), Expr(4), Expr(5), Expr(6), Expr(7), Expr(8), Expr(9), Expr(10), Expr(11), Expr(12), Expr(13), Expr(14), Expr(15), Expr(16), Expr(17), Expr(18), Expr(19), Expr(20), Expr(21), Expr(22), Expr(23), Expr(24), Expr(25), Expr(26), Expr(27), Expr(28), Expr(29), Expr(30), Expr(31), Expr(32), Expr(33), Expr(34), Expr(35), Expr(36), Expr(37), Expr(38), Expr(39), Expr(40), Expr(41), Expr(42), Expr(43), Expr(44), Expr(45), Expr(46), Expr(47), Expr(48), Expr(49), Expr(50), Expr(51), Expr(52), Expr(53), Expr(54), Expr(55), Expr(56), Expr(57), Expr(58), Expr(59), Expr(60), Expr(61), Expr(62)])
in set for block bb13 : Dual([Expr(0), Expr(1), Expr(2)])
out set for block bb13 : Dual([Expr(0), Expr(1), Expr(2)])
in set for block bb14 : Dual([Expr(0), Expr(1), Expr(3)])
out set for block bb14 : Dual([Expr(0), Expr(1), Expr(3)])
----------------POSTPONABLE DEBUG BEGIN----------------
stmt visited _1 = const 0_i32
Entering BB: bb0
stmt visited _2 = const 0_i32
stmt visited _4 = _1
stmt visited _5 = _2
stmt visited _6 = CheckedAdd(_4, _5)
KILL expr CheckedAdd(_4, _5)
stmt visited _3 = move (_6.0: i32)
Entering BB: bb1
stmt visited _7 = _3
stmt visited _9 = _1
stmt visited _10 = _2
stmt visited _8 = Ge(move _9, move _10)
KILL expr Ge(move _9, move _10)
stmt visited _11 = _1
Entering BB: bb2
stmt visited _12 = _2
stmt visited _13 = CheckedAdd(_11, _12)
KILL expr CheckedAdd(_11, _12)
stmt visited _7 = move (_13.0: i32)
Entering BB: bb3
stmt visited _14 = CheckedMul(_7, const 2_i32)
stmt visited _7 = move (_14.0: i32)
Entering BB: bb4
stmt visited _17 = _1
Entering BB: bb5
stmt visited _18 = _2
stmt visited _19 = CheckedAdd(_17, _18)
KILL expr CheckedAdd(_17, _18)
stmt visited _16 = move (_19.0: i32)
Entering BB: bb6
stmt visited _20 = Eq(_16, const i32::MIN)
stmt visited _15 = Neg(move _16)
Entering BB: bb7
stmt visited _21 = CheckedAdd(_15, const 2_i32)
stmt visited _7 = move (_21.0: i32)
Entering BB: bb8
stmt visited _31 = const _
Entering BB: bb9
stmt visited _25 = _31
stmt visited _24 = move _25 as &[&str] (PointerCoercion(Unsize))
stmt visited _30 = &_7
stmt visited _28 = [move _29]
Entering BB: bb10
stmt visited _27 = &_28
stmt visited _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))
terminator visited assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb1, unwind continue]
terminator visited switchInt(move _8) -> [0: bb5, otherwise: bb2]
terminator visited assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _17, move _18) -> [success: bb6, unwind continue]
terminator visited assert(!move _20, "attempt to negate `{}`, which would overflow", _16) -> [success: bb7, unwind continue]
terminator visited assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 2_i32) -> [success: bb8, unwind continue]
terminator visited goto -> bb14
terminator visited goto -> bb9
Entering BB: bb14
terminator visited assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, move _12) -> [success: bb3, unwind continue]
terminator visited assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", _7, const 2_i32) -> [success: bb4, unwind continue]
terminator visited goto -> bb13
terminator visited goto -> bb9
Entering BB: bb13
terminator visited _29 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _30) -> [return: bb10, unwind continue]
terminator visited _23 = Arguments::<'_>::new_v1(move _24, move _26) -> [return: bb11, unwind continue]
terminator visited _22 = _print(move _23) -> [return: bb12, unwind continue]
Entering BB: bb11
terminator visited return
Entering BB: bb12
----------------POSTPONABLE DEBUG END----------------



Postponable:
entry set for block bb0 : Dual([])
entry set for block bb1 : Dual([])
entry set for block bb2 : Dual([])
entry set for block bb3 : Dual([])
entry set for block bb4 : Dual([])
entry set for block bb5 : Dual([])
entry set for block bb6 : Dual([])
entry set for block bb7 : Dual([])
entry set for block bb8 : Dual([])
entry set for block bb9 : Dual([])
entry set for block bb10 : Dual([])
entry set for block bb11 : Dual([])
entry set for block bb12 : Dual([])
entry set for block bb13 : Dual([])
entry set for block bb14 : Dual([])
earliest : [Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([])]
latest : [[], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
----------------USED DEBUG BEGIN----------------
latest exprs: [[], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
stmt visited _6 = CheckedAdd(_4, _5)
e-used expr CheckedAdd(_4, _5)
stmt visited _5 = _2
stmt visited _4 = _1
stmt visited _2 = const 0_i32
stmt visited _1 = const 0_i32
Calculating IN set for BB: bb0
stmt visited _8 = Ge(move _9, move _10)
e-used expr Ge(move _9, move _10)
stmt visited _10 = _2
stmt visited _9 = _1
stmt visited _7 = _3
stmt visited _3 = move (_6.0: i32)
Calculating IN set for BB: bb1
stmt visited _13 = CheckedAdd(_11, _12)
e-used expr CheckedAdd(_11, _12)
stmt visited _12 = _2
stmt visited _11 = _1
Calculating IN set for BB: bb2
stmt visited _14 = CheckedMul(_7, const 2_i32)
stmt visited _7 = move (_13.0: i32)
Calculating IN set for BB: bb3
stmt visited _7 = move (_14.0: i32)
Calculating IN set for BB: bb4
stmt visited _19 = CheckedAdd(_17, _18)
e-used expr CheckedAdd(_17, _18)
stmt visited _18 = _2
stmt visited _17 = _1
Calculating IN set for BB: bb5
stmt visited _20 = Eq(_16, const i32::MIN)
stmt visited _16 = move (_19.0: i32)
Calculating IN set for BB: bb6
stmt visited _21 = CheckedAdd(_15, const 2_i32)
stmt visited _15 = Neg(move _16)
Calculating IN set for BB: bb7
stmt visited _7 = move (_21.0: i32)
Calculating IN set for BB: bb8
stmt visited _30 = &_7
stmt visited _24 = move _25 as &[&str] (PointerCoercion(Unsize))
stmt visited _25 = _31
stmt visited _31 = const _
Calculating IN set for BB: bb9
stmt visited _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))
stmt visited _27 = &_28
stmt visited _28 = [move _29]
Calculating IN set for BB: bb10
terminator visited return, location bb12
Calculating IN set for BB: bb12
latest exprs: []
terminator visited _22 = _print(move _23) -> [return: bb12, unwind continue], location bb11
Calculating IN set for BB: bb11
latest exprs: []
terminator visited _23 = Arguments::<'_>::new_v1(move _24, move _26) -> [return: bb11, unwind continue], location bb10
terminator visited _29 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _30) -> [return: bb10, unwind continue], location bb9
terminator visited goto -> bb9, location bb13
Calculating IN set for BB: bb13
latest exprs: []
terminator visited goto -> bb13, location bb4
terminator visited assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", _7, const 2_i32) -> [success: bb4, unwind continue], location bb3
terminator visited assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, move _12) -> [success: bb3, unwind continue], location bb2
terminator visited goto -> bb9, location bb14
Calculating IN set for BB: bb14
latest exprs: []
terminator visited goto -> bb14, location bb8
terminator visited assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 2_i32) -> [success: bb8, unwind continue], location bb7
terminator visited assert(!move _20, "attempt to negate `{}`, which would overflow", _16) -> [success: bb7, unwind continue], location bb6
terminator visited assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _17, move _18) -> [success: bb6, unwind continue], location bb5
terminator visited switchInt(move _8) -> [0: bb5, otherwise: bb2], location bb1
terminator visited assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb1, unwind continue], location bb0
----------------USED DEBUG END----------------



Used:
entry set for block bb0 : [Expr(1), Expr(2), Expr(3)]
entry set for block bb1 : [Expr(2), Expr(3)]
entry set for block bb2 : []
entry set for block bb3 : []
entry set for block bb4 : []
entry set for block bb5 : []
entry set for block bb6 : []
entry set for block bb7 : []
entry set for block bb8 : []
entry set for block bb9 : []
entry set for block bb10 : []
entry set for block bb11 : []
entry set for block bb12 : []
entry set for block bb13 : []
entry set for block bb14 : []
Transforming the code
temps for bb bb0 : []
temps for bb bb1 : []
temps for bb bb5 : []
temps for bb bb6 : []
temps for bb bb7 : []
temps for bb bb8 : []
temps for bb bb14 : []
temps for bb bb2 : []
temps for bb bb3 : []
temps for bb bb4 : []
temps for bb bb13 : []
temps for bb bb9 : []
temps for bb bb10 : []
temps for bb bb11 : []
temps for bb bb12 : []
Statement has expression: Expr(1)
no temp for Expr(1) ejalkwehjg



The actual stdout differed from the expected stdout.
Actual stdout saved to /home/xavierrouth/dev/rust/build/x86_64-unknown-linux-gnu/test/ui/pre/pre-test-1/pre-test-1.stdout
To update references, rerun the tests and pass the `--bless` flag
To only update this specific test, also pass `--test-args pre/pre-test-1.rs`

error: 1 errors occurred comparing output.
status: exit status: 0
command: RUSTC_ICE="0" "/home/xavierrouth/dev/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc" "/home/xavierrouth/dev/rust/tests/ui/pre/pre-test-1.rs" "-Zthreads=1" "-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX" "-Ztranslate-remapped-path-to-local-path=no" "-Z" "ignore-directory-in-diagnostics-source-blocks=/home/xavierrouth/.cargo" "--sysroot" "/home/xavierrouth/dev/rust/build/x86_64-unknown-linux-gnu/stage1" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "--json" "future-incompat" "-Ccodegen-units=1" "-Zui-testing" "-Zdeduplicate-diagnostics=no" "-Zwrite-long-types-to-disk=no" "-Cstrip=debuginfo" "-C" "prefer-dynamic" "--out-dir" "/home/xavierrouth/dev/rust/build/x86_64-unknown-linux-gnu/test/ui/pre/pre-test-1" "-A" "unused" "-A" "internal_features" "-Crpath" "-Cdebuginfo=0" "-Lnative=/home/xavierrouth/dev/rust/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-L" "/home/xavierrouth/dev/rust/build/x86_64-unknown-linux-gnu/test/ui/pre/pre-test-1/auxiliary" "-Zdump_mir=main" "-Zmir-enable-passes=-GVN,+CopyProp,+ConstProp,+PartialRedundancyElimination,+ReorderBasicBlocks,+ReorderLocals,+AfterGVN,+ReferencePropagation"
--- stdout -------------------------------
Body that analysis is running on DefId(0:3 ~ pre_test_1[6492]::main)
----------------ANTICIPATED DEBUG BEGIN----------------
size: 63
bb0[4]: stmt visited _6 = CheckedAdd(_4, _5)
GEN expr CheckedAdd(_4, _5)
bb0[3]: stmt visited _5 = _2
KILL expr Expr(0)
bb0[2]: stmt visited _4 = _1
KILL expr Expr(0)
bb0[1]: stmt visited _2 = const 0_i32
bb0[0]: stmt visited _1 = const 0_i32
bb1[4]: stmt visited _8 = Ge(move _9, move _10)
GEN expr Ge(move _9, move _10)
bb1[3]: stmt visited _10 = _2
KILL expr Expr(1)
bb1[2]: stmt visited _9 = _1
KILL expr Expr(1)
bb1[1]: stmt visited _7 = _3
bb1[0]: stmt visited _3 = move (_6.0: i32)
bb2[2]: stmt visited _13 = CheckedAdd(_11, _12)
GEN expr CheckedAdd(_11, _12)
bb2[1]: stmt visited _12 = _2
KILL expr Expr(2)
bb2[0]: stmt visited _11 = _1
KILL expr Expr(2)
bb3[1]: stmt visited _14 = CheckedMul(_7, const 2_i32)
bb3[0]: stmt visited _7 = move (_13.0: i32)
bb4[0]: stmt visited _7 = move (_14.0: i32)
bb5[2]: stmt visited _19 = CheckedAdd(_17, _18)
GEN expr CheckedAdd(_17, _18)
bb5[1]: stmt visited _18 = _2
KILL expr Expr(3)
bb5[0]: stmt visited _17 = _1
KILL expr Expr(3)
bb6[1]: stmt visited _20 = Eq(_16, const i32::MIN)
bb6[0]: stmt visited _16 = move (_19.0: i32)
bb7[1]: stmt visited _21 = CheckedAdd(_15, const 2_i32)
bb7[0]: stmt visited _15 = Neg(move _16)
bb8[0]: stmt visited _7 = move (_21.0: i32)
bb9[3]: stmt visited _30 = &_7
bb9[2]: stmt visited _24 = move _25 as &[&str] (PointerCoercion(Unsize))
bb9[1]: stmt visited _25 = _31
bb9[0]: stmt visited _31 = const _
bb10[2]: stmt visited _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))
bb10[1]: stmt visited _27 = &_28
bb10[0]: stmt visited _28 = [move _29]
----------------ANTICIPATED DEBUG END----------------



bb0[4]: stmt visited _6 = CheckedAdd(_4, _5)
GEN expr CheckedAdd(_4, _5)
bb0[3]: stmt visited _5 = _2
KILL expr Expr(0)
bb0[2]: stmt visited _4 = _1
KILL expr Expr(0)
bb0[1]: stmt visited _2 = const 0_i32
bb0[0]: stmt visited _1 = const 0_i32
bb1[4]: stmt visited _8 = Ge(move _9, move _10)
GEN expr Ge(move _9, move _10)
bb1[3]: stmt visited _10 = _2
KILL expr Expr(1)
bb1[2]: stmt visited _9 = _1
KILL expr Expr(1)
bb1[1]: stmt visited _7 = _3
bb1[0]: stmt visited _3 = move (_6.0: i32)
bb2[2]: stmt visited _13 = CheckedAdd(_11, _12)
GEN expr CheckedAdd(_11, _12)
bb2[1]: stmt visited _12 = _2
KILL expr Expr(2)
bb2[0]: stmt visited _11 = _1
KILL expr Expr(2)
bb3[1]: stmt visited _14 = CheckedMul(_7, const 2_i32)
bb3[0]: stmt visited _7 = move (_13.0: i32)
bb4[0]: stmt visited _7 = move (_14.0: i32)
bb5[2]: stmt visited _19 = CheckedAdd(_17, _18)
GEN expr CheckedAdd(_17, _18)
bb5[1]: stmt visited _18 = _2
KILL expr Expr(3)
bb5[0]: stmt visited _17 = _1
KILL expr Expr(3)
bb6[1]: stmt visited _20 = Eq(_16, const i32::MIN)
bb6[0]: stmt visited _16 = move (_19.0: i32)
bb7[1]: stmt visited _21 = CheckedAdd(_15, const 2_i32)
bb7[0]: stmt visited _15 = Neg(move _16)
bb8[0]: stmt visited _7 = move (_21.0: i32)
bb9[3]: stmt visited _30 = &_7
bb9[2]: stmt visited _24 = move _25 as &[&str] (PointerCoercion(Unsize))
bb9[1]: stmt visited _25 = _31
bb9[0]: stmt visited _31 = const _
bb10[2]: stmt visited _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))
bb10[1]: stmt visited _27 = &_28
bb10[0]: stmt visited _28 = [move _29]
Anticipated:
set for block bb0 : Dual([])
set for block bb1 : Dual([])
set for block bb2 : Dual([])
set for block bb3 : Dual([])
set for block bb4 : Dual([])
set for block bb5 : Dual([])
set for block bb6 : Dual([])
set for block bb7 : Dual([])
set for block bb8 : Dual([])
set for block bb9 : Dual([])
set for block bb10 : Dual([])
set for block bb11 : Dual([])
set for block bb12 : Dual([])
set for block bb13 : Dual([])
set for block bb14 : Dual([])
----------------AVAILABLE DEBUG BEGIN----------------
stmt visited _1 = const 0_i32
Entering BB: bb0
stmt visited _2 = const 0_i32
stmt visited _4 = _1
KILL expr Expr(0)
stmt visited _5 = _2
KILL expr Expr(0)
stmt visited _6 = CheckedAdd(_4, _5)
GEN expr CheckedAdd(_4, _5)
stmt visited _3 = move (_6.0: i32)
Entering BB: bb1
stmt visited _7 = _3
stmt visited _9 = _1
KILL expr Expr(1)
stmt visited _10 = _2
KILL expr Expr(1)
stmt visited _8 = Ge(move _9, move _10)
GEN expr Ge(move _9, move _10)
stmt visited _11 = _1
Entering BB: bb2
KILL expr Expr(2)
stmt visited _12 = _2
KILL expr Expr(2)
stmt visited _13 = CheckedAdd(_11, _12)
GEN expr CheckedAdd(_11, _12)
stmt visited _7 = move (_13.0: i32)
Entering BB: bb3
stmt visited _14 = CheckedMul(_7, const 2_i32)
stmt visited _7 = move (_14.0: i32)
Entering BB: bb4
stmt visited _17 = _1
Entering BB: bb5
KILL expr Expr(3)
stmt visited _18 = _2
KILL expr Expr(3)
stmt visited _19 = CheckedAdd(_17, _18)
GEN expr CheckedAdd(_17, _18)
stmt visited _16 = move (_19.0: i32)
Entering BB: bb6
stmt visited _20 = Eq(_16, const i32::MIN)
stmt visited _15 = Neg(move _16)
Entering BB: bb7
stmt visited _21 = CheckedAdd(_15, const 2_i32)
stmt visited _7 = move (_21.0: i32)
Entering BB: bb8
stmt visited _31 = const _
Entering BB: bb9
stmt visited _25 = _31
stmt visited _24 = move _25 as &[&str] (PointerCoercion(Unsize))
stmt visited _30 = &_7
stmt visited _28 = [move _29]
Entering BB: bb10
stmt visited _27 = &_28
stmt visited _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))
terminator visited assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb1, unwind continue]
terminator visited switchInt(move _8) -> [0: bb5, otherwise: bb2]
terminator visited assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _17, move _18) -> [success: bb6, unwind continue]
terminator visited assert(!move _20, "attempt to negate `{}`, which would overflow", _16) -> [success: bb7, unwind continue]
terminator visited assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 2_i32) -> [success: bb8, unwind continue]
terminator visited goto -> bb14
terminator visited goto -> bb9
Entering BB: bb14
terminator visited assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, move _12) -> [success: bb3, unwind continue]
terminator visited assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", _7, const 2_i32) -> [success: bb4, unwind continue]
terminator visited goto -> bb13
terminator visited goto -> bb9
Entering BB: bb13
terminator visited _29 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _30) -> [return: bb10, unwind continue]
terminator visited _23 = Arguments::<'_>::new_v1(move _24, move _26) -> [return: bb11, unwind continue]
terminator visited _22 = _print(move _23) -> [return: bb12, unwind continue]
Entering BB: bb11
terminator visited return
Entering BB: bb12
GEN: anticipated expr: Expr(0)
GEN: anticipated expr: Expr(1)
GEN: anticipated expr: Expr(2)
GEN: anticipated expr: Expr(3)
GEN: anticipated expr: Expr(4)
GEN: anticipated expr: Expr(5)
GEN: anticipated expr: Expr(6)
GEN: anticipated expr: Expr(7)
GEN: anticipated expr: Expr(8)
GEN: anticipated expr: Expr(9)
GEN: anticipated expr: Expr(10)
GEN: anticipated expr: Expr(11)
GEN: anticipated expr: Expr(12)
GEN: anticipated expr: Expr(13)
GEN: anticipated expr: Expr(14)
GEN: anticipated expr: Expr(15)
GEN: anticipated expr: Expr(16)
GEN: anticipated expr: Expr(17)
GEN: anticipated expr: Expr(18)
GEN: anticipated expr: Expr(19)
GEN: anticipated expr: Expr(20)
GEN: anticipated expr: Expr(21)
GEN: anticipated expr: Expr(22)
GEN: anticipated expr: Expr(23)
GEN: anticipated expr: Expr(24)
GEN: anticipated expr: Expr(25)
GEN: anticipated expr: Expr(26)
GEN: anticipated expr: Expr(27)
GEN: anticipated expr: Expr(28)
GEN: anticipated expr: Expr(29)
GEN: anticipated expr: Expr(30)
GEN: anticipated expr: Expr(31)
GEN: anticipated expr: Expr(32)
GEN: anticipated expr: Expr(33)
GEN: anticipated expr: Expr(34)
GEN: anticipated expr: Expr(35)
GEN: anticipated expr: Expr(36)
GEN: anticipated expr: Expr(37)
GEN: anticipated expr: Expr(38)
GEN: anticipated expr: Expr(39)
GEN: anticipated expr: Expr(40)
GEN: anticipated expr: Expr(41)
GEN: anticipated expr: Expr(42)
GEN: anticipated expr: Expr(43)
GEN: anticipated expr: Expr(44)
GEN: anticipated expr: Expr(45)
GEN: anticipated expr: Expr(46)
GEN: anticipated expr: Expr(47)
GEN: anticipated expr: Expr(48)
GEN: anticipated expr: Expr(49)
GEN: anticipated expr: Expr(50)
GEN: anticipated expr: Expr(51)
GEN: anticipated expr: Expr(52)
GEN: anticipated expr: Expr(53)
GEN: anticipated expr: Expr(54)
GEN: anticipated expr: Expr(55)
GEN: anticipated expr: Expr(56)
GEN: anticipated expr: Expr(57)
GEN: anticipated expr: Expr(58)
GEN: anticipated expr: Expr(59)
GEN: anticipated expr: Expr(60)
GEN: anticipated expr: Expr(61)
GEN: anticipated expr: Expr(62)
----------------AVAILABLE DEBUG END----------------



stmt visited _1 = const 0_i32
Entering BB: bb0
stmt visited _2 = const 0_i32
stmt visited _4 = _1
KILL expr Expr(0)
stmt visited _5 = _2
KILL expr Expr(0)
stmt visited _6 = CheckedAdd(_4, _5)
GEN expr CheckedAdd(_4, _5)
terminator visited assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb1, unwind continue]
stmt visited _3 = move (_6.0: i32)
Entering BB: bb1
stmt visited _7 = _3
stmt visited _9 = _1
KILL expr Expr(1)
stmt visited _10 = _2
KILL expr Expr(1)
stmt visited _8 = Ge(move _9, move _10)
GEN expr Ge(move _9, move _10)
terminator visited switchInt(move _8) -> [0: bb5, otherwise: bb2]
stmt visited _11 = _1
Entering BB: bb2
KILL expr Expr(2)
stmt visited _12 = _2
KILL expr Expr(2)
stmt visited _13 = CheckedAdd(_11, _12)
GEN expr CheckedAdd(_11, _12)
terminator visited assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, move _12) -> [success: bb3, unwind continue]
stmt visited _7 = move (_13.0: i32)
Entering BB: bb3
stmt visited _14 = CheckedMul(_7, const 2_i32)
terminator visited assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", _7, const 2_i32) -> [success: bb4, unwind continue]
stmt visited _7 = move (_14.0: i32)
Entering BB: bb4
terminator visited goto -> bb13
stmt visited _17 = _1
Entering BB: bb5
KILL expr Expr(3)
stmt visited _18 = _2
KILL expr Expr(3)
stmt visited _19 = CheckedAdd(_17, _18)
GEN expr CheckedAdd(_17, _18)
terminator visited assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _17, move _18) -> [success: bb6, unwind continue]
stmt visited _16 = move (_19.0: i32)
Entering BB: bb6
stmt visited _20 = Eq(_16, const i32::MIN)
terminator visited assert(!move _20, "attempt to negate `{}`, which would overflow", _16) -> [success: bb7, unwind continue]
stmt visited _15 = Neg(move _16)
Entering BB: bb7
stmt visited _21 = CheckedAdd(_15, const 2_i32)
terminator visited assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 2_i32) -> [success: bb8, unwind continue]
stmt visited _7 = move (_21.0: i32)
Entering BB: bb8
terminator visited goto -> bb14
stmt visited _31 = const _
Entering BB: bb9
stmt visited _25 = _31
stmt visited _24 = move _25 as &[&str] (PointerCoercion(Unsize))
stmt visited _30 = &_7
terminator visited _29 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _30) -> [return: bb10, unwind continue]
stmt visited _28 = [move _29]
Entering BB: bb10
stmt visited _27 = &_28
stmt visited _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))
terminator visited _23 = Arguments::<'_>::new_v1(move _24, move _26) -> [return: bb11, unwind continue]
terminator visited _22 = _print(move _23) -> [return: bb12, unwind continue]
Entering BB: bb11
terminator visited return
Entering BB: bb12
GEN: anticipated expr: Expr(0)
GEN: anticipated expr: Expr(1)
GEN: anticipated expr: Expr(2)
GEN: anticipated expr: Expr(3)
GEN: anticipated expr: Expr(4)
GEN: anticipated expr: Expr(5)
GEN: anticipated expr: Expr(6)
GEN: anticipated expr: Expr(7)
GEN: anticipated expr: Expr(8)
GEN: anticipated expr: Expr(9)
GEN: anticipated expr: Expr(10)
GEN: anticipated expr: Expr(11)
GEN: anticipated expr: Expr(12)
GEN: anticipated expr: Expr(13)
GEN: anticipated expr: Expr(14)
GEN: anticipated expr: Expr(15)
GEN: anticipated expr: Expr(16)
GEN: anticipated expr: Expr(17)
GEN: anticipated expr: Expr(18)
GEN: anticipated expr: Expr(19)
GEN: anticipated expr: Expr(20)
GEN: anticipated expr: Expr(21)
GEN: anticipated expr: Expr(22)
GEN: anticipated expr: Expr(23)
GEN: anticipated expr: Expr(24)
GEN: anticipated expr: Expr(25)
GEN: anticipated expr: Expr(26)
GEN: anticipated expr: Expr(27)
GEN: anticipated expr: Expr(28)
GEN: anticipated expr: Expr(29)
GEN: anticipated expr: Expr(30)
GEN: anticipated expr: Expr(31)
GEN: anticipated expr: Expr(32)
GEN: anticipated expr: Expr(33)
GEN: anticipated expr: Expr(34)
GEN: anticipated expr: Expr(35)
GEN: anticipated expr: Expr(36)
GEN: anticipated expr: Expr(37)
GEN: anticipated expr: Expr(38)
GEN: anticipated expr: Expr(39)
GEN: anticipated expr: Expr(40)
GEN: anticipated expr: Expr(41)
GEN: anticipated expr: Expr(42)
GEN: anticipated expr: Expr(43)
GEN: anticipated expr: Expr(44)
GEN: anticipated expr: Expr(45)
GEN: anticipated expr: Expr(46)
GEN: anticipated expr: Expr(47)
GEN: anticipated expr: Expr(48)
GEN: anticipated expr: Expr(49)
GEN: anticipated expr: Expr(50)
GEN: anticipated expr: Expr(51)
GEN: anticipated expr: Expr(52)
GEN: anticipated expr: Expr(53)
GEN: anticipated expr: Expr(54)
GEN: anticipated expr: Expr(55)
GEN: anticipated expr: Expr(56)
GEN: anticipated expr: Expr(57)
GEN: anticipated expr: Expr(58)
GEN: anticipated expr: Expr(59)
GEN: anticipated expr: Expr(60)
GEN: anticipated expr: Expr(61)
GEN: anticipated expr: Expr(62)
terminator visited goto -> bb9
Entering BB: bb13
terminator visited goto -> bb9
Entering BB: bb14
Available:
in set for block bb0 : Dual([])
out set for block bb0 : Dual([Expr(0)])
in set for block bb1 : Dual([Expr(0)])
out set for block bb1 : Dual([Expr(0), Expr(1)])
in set for block bb2 : Dual([Expr(0), Expr(1)])
out set for block bb2 : Dual([Expr(0), Expr(1), Expr(2)])
in set for block bb3 : Dual([Expr(0), Expr(1), Expr(2)])
out set for block bb3 : Dual([Expr(0), Expr(1), Expr(2)])
in set for block bb4 : Dual([Expr(0), Expr(1), Expr(2)])
out set for block bb4 : Dual([Expr(0), Expr(1), Expr(2)])
in set for block bb5 : Dual([Expr(0), Expr(1)])
out set for block bb5 : Dual([Expr(0), Expr(1), Expr(3)])
in set for block bb6 : Dual([Expr(0), Expr(1), Expr(3)])
out set for block bb6 : Dual([Expr(0), Expr(1), Expr(3)])
in set for block bb7 : Dual([Expr(0), Expr(1), Expr(3)])
out set for block bb7 : Dual([Expr(0), Expr(1), Expr(3)])
in set for block bb8 : Dual([Expr(0), Expr(1), Expr(3)])
out set for block bb8 : Dual([Expr(0), Expr(1), Expr(3)])
in set for block bb9 : Dual([Expr(0), Expr(1)])
out set for block bb9 : Dual([Expr(0), Expr(1)])
in set for block bb10 : Dual([Expr(0), Expr(1)])
out set for block bb10 : Dual([Expr(0), Expr(1)])
in set for block bb11 : Dual([Expr(0), Expr(1)])
out set for block bb11 : Dual([Expr(0), Expr(1)])
in set for block bb12 : Dual([Expr(0), Expr(1)])
out set for block bb12 : Dual([Expr(0), Expr(1), Expr(2), Expr(3), Expr(4), Expr(5), Expr(6), Expr(7), Expr(8), Expr(9), Expr(10), Expr(11), Expr(12), Expr(13), Expr(14), Expr(15), Expr(16), Expr(17), Expr(18), Expr(19), Expr(20), Expr(21), Expr(22), Expr(23), Expr(24), Expr(25), Expr(26), Expr(27), Expr(28), Expr(29), Expr(30), Expr(31), Expr(32), Expr(33), Expr(34), Expr(35), Expr(36), Expr(37), Expr(38), Expr(39), Expr(40), Expr(41), Expr(42), Expr(43), Expr(44), Expr(45), Expr(46), Expr(47), Expr(48), Expr(49), Expr(50), Expr(51), Expr(52), Expr(53), Expr(54), Expr(55), Expr(56), Expr(57), Expr(58), Expr(59), Expr(60), Expr(61), Expr(62)])
in set for block bb13 : Dual([Expr(0), Expr(1), Expr(2)])
out set for block bb13 : Dual([Expr(0), Expr(1), Expr(2)])
in set for block bb14 : Dual([Expr(0), Expr(1), Expr(3)])
out set for block bb14 : Dual([Expr(0), Expr(1), Expr(3)])
----------------POSTPONABLE DEBUG BEGIN----------------
stmt visited _1 = const 0_i32
Entering BB: bb0
stmt visited _2 = const 0_i32
stmt visited _4 = _1
stmt visited _5 = _2
stmt visited _6 = CheckedAdd(_4, _5)
KILL expr CheckedAdd(_4, _5)
stmt visited _3 = move (_6.0: i32)
Entering BB: bb1
stmt visited _7 = _3
stmt visited _9 = _1
stmt visited _10 = _2
stmt visited _8 = Ge(move _9, move _10)
KILL expr Ge(move _9, move _10)
stmt visited _11 = _1
Entering BB: bb2
stmt visited _12 = _2
stmt visited _13 = CheckedAdd(_11, _12)
KILL expr CheckedAdd(_11, _12)
stmt visited _7 = move (_13.0: i32)
Entering BB: bb3
stmt visited _14 = CheckedMul(_7, const 2_i32)
stmt visited _7 = move (_14.0: i32)
Entering BB: bb4
stmt visited _17 = _1
Entering BB: bb5
stmt visited _18 = _2
stmt visited _19 = CheckedAdd(_17, _18)
KILL expr CheckedAdd(_17, _18)
stmt visited _16 = move (_19.0: i32)
Entering BB: bb6
stmt visited _20 = Eq(_16, const i32::MIN)
stmt visited _15 = Neg(move _16)
Entering BB: bb7
stmt visited _21 = CheckedAdd(_15, const 2_i32)
stmt visited _7 = move (_21.0: i32)
Entering BB: bb8
stmt visited _31 = const _
Entering BB: bb9
stmt visited _25 = _31
stmt visited _24 = move _25 as &[&str] (PointerCoercion(Unsize))
stmt visited _30 = &_7
stmt visited _28 = [move _29]
Entering BB: bb10
stmt visited _27 = &_28
stmt visited _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))
terminator visited assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb1, unwind continue]
terminator visited switchInt(move _8) -> [0: bb5, otherwise: bb2]
terminator visited assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _17, move _18) -> [success: bb6, unwind continue]
terminator visited assert(!move _20, "attempt to negate `{}`, which would overflow", _16) -> [success: bb7, unwind continue]
terminator visited assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 2_i32) -> [success: bb8, unwind continue]
terminator visited goto -> bb14
terminator visited goto -> bb9
Entering BB: bb14
terminator visited assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, move _12) -> [success: bb3, unwind continue]
terminator visited assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", _7, const 2_i32) -> [success: bb4, unwind continue]
terminator visited goto -> bb13
terminator visited goto -> bb9
Entering BB: bb13
terminator visited _29 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _30) -> [return: bb10, unwind continue]
terminator visited _23 = Arguments::<'_>::new_v1(move _24, move _26) -> [return: bb11, unwind continue]
terminator visited _22 = _print(move _23) -> [return: bb12, unwind continue]
Entering BB: bb11
terminator visited return
Entering BB: bb12
----------------POSTPONABLE DEBUG END----------------



Postponable:
entry set for block bb0 : Dual([])
entry set for block bb1 : Dual([])
entry set for block bb2 : Dual([])
entry set for block bb3 : Dual([])
entry set for block bb4 : Dual([])
entry set for block bb5 : Dual([])
entry set for block bb6 : Dual([])
entry set for block bb7 : Dual([])
entry set for block bb8 : Dual([])
entry set for block bb9 : Dual([])
entry set for block bb10 : Dual([])
entry set for block bb11 : Dual([])
entry set for block bb12 : Dual([])
entry set for block bb13 : Dual([])
entry set for block bb14 : Dual([])
earliest : [Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([]), Dual([])]
latest : [[], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
----------------USED DEBUG BEGIN----------------
latest exprs: [[], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
stmt visited _6 = CheckedAdd(_4, _5)
e-used expr CheckedAdd(_4, _5)
stmt visited _5 = _2
stmt visited _4 = _1
stmt visited _2 = const 0_i32
stmt visited _1 = const 0_i32
Calculating IN set for BB: bb0
stmt visited _8 = Ge(move _9, move _10)
e-used expr Ge(move _9, move _10)
stmt visited _10 = _2
stmt visited _9 = _1
stmt visited _7 = _3
stmt visited _3 = move (_6.0: i32)
Calculating IN set for BB: bb1
stmt visited _13 = CheckedAdd(_11, _12)
e-used expr CheckedAdd(_11, _12)
stmt visited _12 = _2
stmt visited _11 = _1
Calculating IN set for BB: bb2
stmt visited _14 = CheckedMul(_7, const 2_i32)
stmt visited _7 = move (_13.0: i32)
Calculating IN set for BB: bb3
stmt visited _7 = move (_14.0: i32)
Calculating IN set for BB: bb4
stmt visited _19 = CheckedAdd(_17, _18)
e-used expr CheckedAdd(_17, _18)
stmt visited _18 = _2
stmt visited _17 = _1
Calculating IN set for BB: bb5
stmt visited _20 = Eq(_16, const i32::MIN)
stmt visited _16 = move (_19.0: i32)
Calculating IN set for BB: bb6
stmt visited _21 = CheckedAdd(_15, const 2_i32)
stmt visited _15 = Neg(move _16)
Calculating IN set for BB: bb7
stmt visited _7 = move (_21.0: i32)
Calculating IN set for BB: bb8
stmt visited _30 = &_7
stmt visited _24 = move _25 as &[&str] (PointerCoercion(Unsize))
stmt visited _25 = _31
stmt visited _31 = const _
Calculating IN set for BB: bb9
stmt visited _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))
stmt visited _27 = &_28
stmt visited _28 = [move _29]
Calculating IN set for BB: bb10
terminator visited return, location bb12
Calculating IN set for BB: bb12
latest exprs: []
terminator visited _22 = _print(move _23) -> [return: bb12, unwind continue], location bb11
Calculating IN set for BB: bb11
latest exprs: []
terminator visited _23 = Arguments::<'_>::new_v1(move _24, move _26) -> [return: bb11, unwind continue], location bb10
terminator visited _29 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _30) -> [return: bb10, unwind continue], location bb9
terminator visited goto -> bb9, location bb13
Calculating IN set for BB: bb13
latest exprs: []
terminator visited goto -> bb13, location bb4
terminator visited assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", _7, const 2_i32) -> [success: bb4, unwind continue], location bb3
terminator visited assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, move _12) -> [success: bb3, unwind continue], location bb2
terminator visited goto -> bb9, location bb14
Calculating IN set for BB: bb14
latest exprs: []
terminator visited goto -> bb14, location bb8
terminator visited assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 2_i32) -> [success: bb8, unwind continue], location bb7
terminator visited assert(!move _20, "attempt to negate `{}`, which would overflow", _16) -> [success: bb7, unwind continue], location bb6
terminator visited assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _17, move _18) -> [success: bb6, unwind continue], location bb5
terminator visited switchInt(move _8) -> [0: bb5, otherwise: bb2], location bb1
terminator visited assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb1, unwind continue], location bb0
----------------USED DEBUG END----------------



Used:
entry set for block bb0 : [Expr(1), Expr(2), Expr(3)]
entry set for block bb1 : [Expr(2), Expr(3)]
entry set for block bb2 : []
entry set for block bb3 : []
entry set for block bb4 : []
entry set for block bb5 : []
entry set for block bb6 : []
entry set for block bb7 : []
entry set for block bb8 : []
entry set for block bb9 : []
entry set for block bb10 : []
entry set for block bb11 : []
entry set for block bb12 : []
entry set for block bb13 : []
entry set for block bb14 : []
Transforming the code
temps for bb bb0 : []
temps for bb bb1 : []
temps for bb bb5 : []
temps for bb bb6 : []
temps for bb bb7 : []
temps for bb bb8 : []
temps for bb bb14 : []
temps for bb bb2 : []
temps for bb bb3 : []
temps for bb bb4 : []
temps for bb bb13 : []
temps for bb bb9 : []
temps for bb bb10 : []
temps for bb bb11 : []
temps for bb bb12 : []
Statement has expression: Expr(1)
no temp for Expr(1) ejalkwehjg
------------------------------------------
stderr: none



failures:
    [ui] tests/ui/pre/pre-test-1.rs

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 16093 filtered out; finished in 121.22ms

Some tests failed in compiletest suite=ui mode=ui host=x86_64-unknown-linux-gnu target=x86_64-unknown-linux-gnu
