- // MIR for `simple` before PartialRedundancyElimination
+ // MIR for `simple` after PartialRedundancyElimination
  
  fn simple(_1: i32) -> i32 {
      let mut _0: i32;
      let mut _2: i32;
      let mut _3: i32;
      let mut _4: i32;
      let mut _5: i32;
      let mut _6: bool;
  
      bb0: {
          _2 = const 3_i32;
          _3 = const 5_i32;
          _4 = const 10_i32;
          _5 = const 10_i32;
          _6 = const true;
          switchInt(_6) -> [1: bb1, otherwise: bb2];
      }
  
      bb1: {
          _4 = Add(_2, _3);
-         goto -> bb3;
+         goto -> bb4;
      }
  
      bb2: {
          _5 = Add(_2, _3);
-         goto -> bb3;
+         goto -> bb5;
      }
  
      bb3: {
          _0 = _4;
          return;
+     }
+ 
+     bb4: {
+         goto -> bb3;
+     }
+ 
+     bb5: {
+         goto -> bb3;
      }
  }
  
