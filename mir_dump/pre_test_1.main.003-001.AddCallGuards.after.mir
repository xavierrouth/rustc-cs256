// MIR for `main` after AddCallGuards

fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _4: i32;
    let mut _5: i32;
    let mut _6: (i32, bool);
    let _8: ();
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let mut _12: i32;
    let mut _13: i32;
    let mut _14: (i32, bool);
    let mut _15: (i32, bool);
    let mut _16: i32;
    let mut _17: i32;
    let mut _18: i32;
    let mut _19: i32;
    let mut _20: (i32, bool);
    let mut _21: bool;
    let mut _22: (i32, bool);
    let _23: ();
    let _24: ();
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let mut _27: &[&str; 2];
    let _28: &[&str; 2];
    let _29: [&str; 2];
    let mut _30: &[core::fmt::rt::Argument<'_>];
    let mut _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: [core::fmt::rt::Argument<'_>; 1];
    let mut _34: core::fmt::rt::Argument<'_>;
    let mut _35: &i32;
    let _36: &i32;
    scope 1 {
        debug x => _1;
        let mut _2: i32;
        scope 2 {
            debug y => _2;
            let mut _3: i32;
            scope 3 {
                debug t => _3;
                let mut _7: i32;
                scope 4 {
                    debug f => _7;
                    let mut _37: &[&str; 2];
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = const 0_i32;
        StorageLive(_2);
        _2 = const 0_i32;
        StorageLive(_3);
        StorageLive(_4);
        _4 = _1;
        StorageLive(_5);
        _5 = _2;
        _6 = CheckedAdd(_4, _5);
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb1, unwind continue];
    }

    bb1: {
        _3 = move (_6.0: i32);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_7);
        _7 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _1;
        StorageLive(_11);
        _11 = _2;
        _9 = Ge(move _10, move _11);
        switchInt(move _9) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        _12 = _1;
        StorageLive(_13);
        _13 = _2;
        _14 = CheckedAdd(_12, _13);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, move _13) -> [success: bb3, unwind continue];
    }

    bb3: {
        _7 = move (_14.0: i32);
        StorageDead(_13);
        StorageDead(_12);
        _15 = CheckedMul(_7, const 2_i32);
        assert(!move (_15.1: bool), "attempt to compute `{} * {}`, which would overflow", _7, const 2_i32) -> [success: bb4, unwind continue];
    }

    bb4: {
        _7 = move (_15.0: i32);
        _8 = const ();
        goto -> bb9;
    }

    bb5: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _1;
        StorageLive(_19);
        _19 = _2;
        _20 = CheckedAdd(_18, _19);
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", move _18, move _19) -> [success: bb6, unwind continue];
    }

    bb6: {
        _17 = move (_20.0: i32);
        StorageDead(_19);
        StorageDead(_18);
        _21 = Eq(_17, const i32::MIN);
        assert(!move _21, "attempt to negate `{}`, which would overflow", _17) -> [success: bb7, unwind continue];
    }

    bb7: {
        _16 = Neg(move _17);
        StorageDead(_17);
        _22 = CheckedAdd(_16, const 2_i32);
        assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _16, const 2_i32) -> [success: bb8, unwind continue];
    }

    bb8: {
        _7 = move (_22.0: i32);
        StorageDead(_16);
        _8 = const ();
        goto -> bb9;
    }

    bb9: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _37 = const _;
        _28 = &(*_37);
        _27 = &(*_28);
        _26 = move _27 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_27);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_7;
        _35 = &(*_36);
        _34 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _35) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_35);
        _33 = [move _34];
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = move _31 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_31);
        _25 = Arguments::<'_>::new_v1(move _26, move _30) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_30);
        StorageDead(_26);
        _24 = _print(move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_24);
        _23 = const ();
        StorageDead(_23);
        _0 = const ();
        StorageDead(_7);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
