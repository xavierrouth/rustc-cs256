// MIR for `main` after PreCodegen

fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _4: (i32, bool);
    let mut _6: bool;
    let mut _7: (i32, bool);
    let mut _8: (i32, bool);
    let mut _9: i32;
    let mut _10: i32;
    let mut _11: (i32, bool);
    let mut _12: bool;
    let mut _13: (i32, bool);
    let _14: ();
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &i32;
    scope 1 {
        debug x => const 0_i32;
        let mut _2: i32;
        scope 2 {
            debug y => const 0_i32;
            let mut _3: i32;
            scope 3 {
                debug t => _3;
                let mut _5: i32;
                scope 4 {
                    debug f => _5;
                    let mut _22: &[&str; 2];
                }
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 0_i32;
        _4 = CheckedAdd(_1, _2);
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _3 = move (_4.0: i32);
        _5 = _3;
        _6 = Ge(_1, _2);
        switchInt(move _6) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        _7 = CheckedAdd(_1, _2);
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, _2) -> [success: bb3, unwind continue];
    }

    bb3: {
        _5 = move (_7.0: i32);
        _8 = CheckedMul(_5, const 2_i32);
        assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", _5, const 2_i32) -> [success: bb4, unwind continue];
    }

    bb4: {
        _5 = move (_8.0: i32);
        goto -> bb9;
    }

    bb5: {
        _11 = CheckedAdd(_1, _2);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, _2) -> [success: bb6, unwind continue];
    }

    bb6: {
        _10 = move (_11.0: i32);
        _12 = Eq(_10, const i32::MIN);
        assert(!move _12, "attempt to negate `{}`, which would overflow", _10) -> [success: bb7, unwind continue];
    }

    bb7: {
        _9 = Neg(move _10);
        _13 = CheckedAdd(_9, const 2_i32);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 2_i32) -> [success: bb8, unwind continue];
    }

    bb8: {
        _5 = move (_13.0: i32);
        goto -> bb9;
    }

    bb9: {
        _22 = const _;
        _16 = _22 as &[&str] (PointerCoercion(Unsize));
        _21 = &_5;
        _20 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_21) -> [return: bb10, unwind continue];
    }

    bb10: {
        _19 = [move _20];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _15 = Arguments::<'_>::new_v1(move _16, move _17) -> [return: bb11, unwind continue];
    }

    bb11: {
        _14 = _print(move _15) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }
}
